syntax = "proto3";

message State {
  optional TileOffers previous_offers = 2;
  optional TileOffers next_offers = 3;
  // Tiles are in random order
  repeated int32 remaining_tiles = 4;
  // Ordered by turn order in the first round
  repeated PlayerState player_state = 5;
}

message Tile { optional int32 tile_number = 1; }

message TileOffer {
  // Absent if the tile has been claimed and placed
  optional Tile tile = 1;
  optional TileClaim claim = 2;
}

message TileClaim { optional string player_id = 1; }

message TileOffers { repeated TileOffer offer = 1; }

message PlayerState {
  // Unique ID within the game and optionally across all games
  optional string id = 1;
  // Display name
  optional string name = 2;
  // Contains a LocationState (often the default instance) for every location
  // that can possibly be occupied during a game. The region is a square whose
  // sides have length 1 + 2 * (max kingdom size - 1) since the player could
  // build out to (max kingdom size - 1) from the center in any direction.
  //
  // An alternative representation would be the history of select tiles and
  // their placement position. That representation is expected to be more
  // compact but less efficient to access by location.
  repeated LocationState location_state = 3;
}

enum Terrain {
  TERRAIN_UNKNOWN = 0;
  TERRAIN_EMPTY = 1;
  TERRAIN_CENTER = 2;
  TERRAIN_FOREST = 3;
  TERRAIN_WATER = 4;
  TERRAIN_PASTURE = 5;
  TERRAIN_SWAMP = 6;
  TERRAIN_MINE = 7;
  TERRAIN_HAY = 8;
}

message LocationState {
  // Use tile number + tile location index as the representation of location
  // state since it centralizes the knowledge of tile data in one place (code)
  // and it retains the history of player tile selections
  optional Tile tile = 1;
  optional int32 tile_location_index = 2;
}

// The direction of a tile with respect to its zeroth square
enum TileOrientation {
  UNKNOWN = 0;
  RIGHT = 1;
  DOWN = 2;
  LEFT = 3;
  UP = 4;
}

message Action {
  message ClaimTile { optional int32 offer_index = 1; }

  // Remove and place the next unplaced tile in the previous offer
  message PlaceTile {
    optional int32 x = 2;
    optional int32 y = 3;
    optional TileOrientation orientation = 4;
  }

  // Either one or both of the following properties may be present. The first
  // turn of the game is only a claim; the last turn of the game is only a
  // place.
  optional ClaimTile claim_tile = 1;
  optional PlaceTile place_tile = 2;
}
